#!/usr/bin/env python3
# Python 3.9 or higher required to run this program.

# pylint: disable=missing-docstring

import argparse
import json
import logging
import re
import time
from pathlib import Path
from typing import List, NamedTuple, Optional

import pandas as pd
import numpy as np
import lightgbm as lgb
import xgboost as xgb
from pytorch_tabnet.tab_model import TabNetClassifier
from pytorch_tabnet.metrics import Metric
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import recall_score


logger = logging.getLogger('yaroslavl')


class ProgramOptions(NamedTuple):
    input_data_dir: Path
    output_path: Path
    model_name: str
    start_seed: int
    seed_count: int
    fold_count: int
    log_path: Optional[Path]


TARGETS = [
    'Артериальная гипертензия',
    'ОНМК',
    'Стенокардия, ИБС, инфаркт миокарда',
    'Сердечная недостаточность',
    'Прочие заболевания сердца',
]


XGBOOST_FEATURE_NAMES = {
    'Артериальная гипертензия': [
        'Пол - М',

        'Семья - в браке в настоящее время',
        'Семья - в разводе',
        'Семья - вдовец / вдова',
        'Семья - гражданский брак / проживание с партнером',
        #'Семья - никогда не был(а) в браке',
        #'Семья - раздельное проживание (официально не разведены)',
        'Семья - живет один',
        
        'Одинокий мужчина',
        'Одинокая женщина',

        #'Этнос - европейская',
        #'Этнос - другая азиатская',
        #'Этнос - прочее',
        
        #'Национальность - Азербайджанцы',
        #'Национальность - Армяне',
        #'Национальность - Башкиры',
        #'Национальность - Белорусы',
        #'Национальность - Буряты',
        #'Национальность - Другие национальности',
        #'Национальность - Евреи',
        #'Национальность - Казахи',
        #'Национальность - Киргизы',
        #'Национальность - Лезгины',
        #'Национальность - Молдаване',
        #'Национальность - Мордва',
        #'Национальность - Немцы',
        #'Национальность - Русские',
        #'Национальность - Таджики',
        #'Национальность - Татары',
        #'Национальность - Удмурты',
        #'Национальность - Украинцы',
        #'Национальность - Чуваши',
        #'Национальность - Эстонцы',
        #'Национальность - Азия / Кавказ',
        'Национальность - Русские / Белорусы / Украинцы',
        
        #'Религия - Атеист / агностик',
        #'Религия - Другое',
        #'Религия - Индуизм',
        #'Религия - Ислам',
        #'Религия - Нет',
        #'Религия - Христианство',
        #'Религия - Индуизм / Ислам / Другое',
        'Религия - Верующий',
        
        #'Образование - начальная школа',
        #'Образование - среднее',
        #'Образование - профессиональное училище',
        #'Образование - ВУЗ',
        'Образование - Уровень',
        
        'Профессия - ведение домашнего хозяйства',
        #'Профессия - вооруженные силы',
        'Профессия - дипломированные специалисты',
        #'Профессия - квалифицированные работники сельского хозяйства и рыболовного',
        'Профессия - низкоквалифицированные работники',
        'Профессия - операторы и монтажники установок и машинного оборудования',
        #'Профессия - законотворцы / менеджеры',
        'Профессия - сфера обслуживания',
        'Профессия - ремесленники и представители других отраслей промышленности',
        #'Профессия - служащие',
        #'Профессия - техники и младшие специалисты',
        'Профессия - военные / служащие / управление',
        'Профессия - промышленность',
        'Профессия - низкая квалификация',
        
        'Вы работаете?',
        'Выход на пенсию',
        'Без работы и не на пенсии',
        'Прекращение работы по болезни',

        'Сахарный диабет',
        #'Гепатит',
        #'Онкология',
        'Хроническое заболевание легких',
        'Бронхиальная астма',
        'Туберкулез легких',
        #'ВИЧ/СПИД',

        'Болезнь легких',
        'Инфекционная болезнь',
        'Хроническая болезнь',
        
        'Регулярный прием лекарственных средств',
        'Регулярный прием лекарственных средств без болезней из опроса',

        #'Травмы за год',
        #'Переломы',
        'Травмы / переломы',

        #'Статус Курения - Бросил(а)',
        #'Статус Курения - Курит',
        #'Статус Курения - Никогда не курил(а)',
        'Возраст курения',
        #'Сигарет в день',
        'Сигарет в день (актив)',
        'Пассивное курение',
        'Частота пасс кур',
        'Активное или пассивное курение',
        
        #'Алкоголь - никогда не употреблял',
        'Алкоголь - ранее употреблял',
        'Алкоголь - употребляю в настоящее время',
        'Возраст алког',

        #'Без вредных привычек',
        #'Бросил вредную привычку',
        #'Макс. возраст вредной привычки',

        'Время засыпания',
        'Время пробуждения',
        'Продолжительность сна',
        'Сон после обеда',
        
        'Спорт клубы',
        'Религия клубы',

        #'Больной',
        #'Идеальное здоровье',
        #'Само совершенство',
    ],
    'ОНМК': [
        'Пол - М',

        'Семья - в браке в настоящее время',
        #'Семья - в разводе',
        'Семья - вдовец / вдова',
        'Семья - гражданский брак / проживание с партнером',
        #'Семья - никогда не был(а) в браке',
        #'Семья - раздельное проживание (официально не разведены)',
        #'Семья - живет один',
        
        #'Одинокий мужчина',
        #'Одинокая женщина',

        #'Этнос - европейская',
        #'Этнос - другая азиатская',
        #'Этнос - прочее',
        
        #'Национальность - Азербайджанцы',
        #'Национальность - Армяне',
        #'Национальность - Башкиры',
        #'Национальность - Белорусы',
        #'Национальность - Буряты',
        #'Национальность - Другие национальности',
        #'Национальность - Евреи',
        #'Национальность - Казахи',
        #'Национальность - Киргизы',
        #'Национальность - Лезгины',
        #'Национальность - Молдаване',
        #'Национальность - Мордва',
        #'Национальность - Немцы',
        #'Национальность - Русские',
        #'Национальность - Таджики',
        #'Национальность - Татары',
        #'Национальность - Удмурты',
        #'Национальность - Украинцы',
        #'Национальность - Чуваши',
        #'Национальность - Эстонцы',
        #'Национальность - Азия / Кавказ',
        'Национальность - Русские / Белорусы / Украинцы',
        
        #'Религия - Атеист / агностик',
        #'Религия - Другое',
        #'Религия - Индуизм',
        #'Религия - Ислам',
        #'Религия - Нет',
        'Религия - Христианство',
        #'Религия - Индуизм / Ислам / Другое',
        #'Религия - Верующий',
        
        #'Образование - начальная школа',
        #'Образование - среднее',
        #'Образование - профессиональное училище',
        #'Образование - ВУЗ',
        'Образование - Уровень',
        
        #'Профессия - ведение домашнего хозяйства',
        #'Профессия - вооруженные силы',
        'Профессия - дипломированные специалисты',
        'Профессия - квалифицированные работники сельского хозяйства и рыболовного',
        #'Профессия - низкоквалифицированные работники',
        #'Профессия - операторы и монтажники установок и машинного оборудования',
        #'Профессия - законотворцы / менеджеры',
        #'Профессия - сфера обслуживания',
        'Профессия - ремесленники и представители других отраслей промышленности',
        ##'Профессия - служащие',
        'Профессия - техники и младшие специалисты',
        'Профессия - военные / служащие / управление',
        'Профессия - промышленность',
        'Профессия - низкая квалификация',
        
        'Вы работаете?',
        #'Выход на пенсию',
        'Без работы и не на пенсии',
        'Прекращение работы по болезни',

        'Сахарный диабет',
        #'Гепатит',
        #'Онкология',
        'Хроническое заболевание легких',
        #'Бронхиальная астма',
        #'Туберкулез легких',
        #'ВИЧ/СПИД',

        'Болезнь легких',
        #'Инфекционная болезнь',
        #'Хроническая болезнь',
        
        'Регулярный прием лекарственных средств',
        'Регулярный прием лекарственных средств без болезней из опроса',

        'Травмы за год',
        'Переломы',
        'Травмы / переломы',

        'Статус Курения - Бросил(а)',
        'Статус Курения - Курит',
        #'Статус Курения - Никогда не курил(а)',
        'Возраст курения',
        #'Сигарет в день',
        'Сигарет в день (актив)',
        'Пассивное курение',
        'Частота пасс кур',
        #'Активное или пассивное курение',
        
        #'Алкоголь - никогда не употреблял',
        #'Алкоголь - ранее употреблял',
        'Алкоголь - употребляю в настоящее время',
        'Возраст алког',

        'Без вредных привычек',
        'Бросил вредную привычку',
        'Макс. возраст вредной привычки',

        'Время засыпания',
        'Время пробуждения',
        'Продолжительность сна',
        'Сон после обеда',
        
        #'Спорт клубы',
        #'Религия клубы',

        'Больной',
        'Идеальное здоровье',
        #'Само совершенство',
    ],
    'Стенокардия, ИБС, инфаркт миокарда': [
        'Пол - М',

        'Семья - в браке в настоящее время',
        'Семья - в разводе',
        'Семья - вдовец / вдова',
        'Семья - гражданский брак / проживание с партнером',
        #'Семья - никогда не был(а) в браке',
        #'Семья - раздельное проживание (официально не разведены)',
        'Семья - живет один',
        
        #'Одинокий мужчина',
        'Одинокая женщина',

        'Этнос - европейская',
        'Этнос - другая азиатская',
        #'Этнос - прочее',
        
        #'Национальность - Азербайджанцы',
        #'Национальность - Армяне',
        #'Национальность - Башкиры',
        #'Национальность - Белорусы',
        #'Национальность - Буряты',
        #'Национальность - Другие национальности',
        #'Национальность - Евреи',
        #'Национальность - Казахи',
        #'Национальность - Киргизы',
        #'Национальность - Лезгины',
        #'Национальность - Молдаване',
        #'Национальность - Мордва',
        #'Национальность - Немцы',
        #'Национальность - Русские',
        #'Национальность - Таджики',
        'Национальность - Татары',
        #'Национальность - Удмурты',
        #'Национальность - Украинцы',
        #'Национальность - Чуваши',
        #'Национальность - Эстонцы',
        #'Национальность - Азия / Кавказ',
        'Национальность - Русские / Белорусы / Украинцы',
        
        'Религия - Атеист / агностик',
        #'Религия - Другое',
        #'Религия - Индуизм',
        #'Религия - Ислам',
        'Религия - Нет',
        'Религия - Христианство',
        'Религия - Индуизм / Ислам / Другое',
        'Религия - Верующий',
        
        #'Образование - начальная школа',
        #'Образование - среднее',
        #'Образование - профессиональное училище',
        #'Образование - ВУЗ',
        'Образование - Уровень',
        
        #'Профессия - ведение домашнего хозяйства',
        #'Профессия - вооруженные силы',
        'Профессия - дипломированные специалисты',
        'Профессия - квалифицированные работники сельского хозяйства и рыболовного',
        'Профессия - низкоквалифицированные работники',
        'Профессия - операторы и монтажники установок и машинного оборудования',
        'Профессия - законотворцы / менеджеры',
        'Профессия - сфера обслуживания',
        'Профессия - ремесленники и представители других отраслей промышленности',
        'Профессия - служащие',
        #'Профессия - техники и младшие специалисты',
        'Профессия - военные / служащие / управление',
        'Профессия - промышленность',
        'Профессия - низкая квалификация',
        
        'Вы работаете?',
        'Выход на пенсию',
        'Без работы и не на пенсии',
        'Прекращение работы по болезни',

        'Сахарный диабет',
        #'Гепатит',
        'Онкология',
        'Хроническое заболевание легких',
        'Бронхиальная астма',
        'Туберкулез легких',
        #'ВИЧ/СПИД',

        #'Болезнь легких',
        'Инфекционная болезнь',
        'Хроническая болезнь',
        
        'Регулярный прием лекарственных средств',
        #'Регулярный прием лекарственных средств без болезней из опроса',

        #'Травмы за год',
        'Переломы',
        'Травмы / переломы',

        'Статус Курения - Бросил(а)',
        'Статус Курения - Курит',
        #'Статус Курения - Никогда не курил(а)',
        #'Возраст курения',
        'Сигарет в день',
        'Сигарет в день (актив)',
        'Пассивное курение',
        'Частота пасс кур',
        'Активное или пассивное курение',
        
        #'Алкоголь - никогда не употреблял',
        #'Алкоголь - ранее употреблял',
        #'Алкоголь - употребляю в настоящее время',
        'Возраст алког',

        'Без вредных привычек',
        'Бросил вредную привычку',
        'Макс. возраст вредной привычки',

        'Время засыпания',
        'Время пробуждения',
        'Продолжительность сна',
        #'Сон после обеда',
        
        'Спорт клубы',
        'Религия клубы',

        'Больной',
        'Идеальное здоровье',
        'Само совершенство',
    ],
    'Сердечная недостаточность': [
        'Пол - М',

        'Семья - в браке в настоящее время',
        #'Семья - в разводе',
        'Семья - вдовец / вдова',
        'Семья - гражданский брак / проживание с партнером',
        'Семья - никогда не был(а) в браке',
        #'Семья - раздельное проживание (официально не разведены)',
        'Семья - живет один',
        
        'Одинокий мужчина',
        #'Одинокая женщина',

        #'Этнос - европейская',
        #'Этнос - другая азиатская',
        #'Этнос - прочее',
        
        #'Национальность - Азербайджанцы',
        #'Национальность - Армяне',
        #'Национальность - Башкиры',
        #'Национальность - Белорусы',
        #'Национальность - Буряты',
        #'Национальность - Другие национальности',
        #'Национальность - Евреи',
        #'Национальность - Казахи',
        #'Национальность - Киргизы',
        #'Национальность - Лезгины',
        #'Национальность - Молдаване',
        #'Национальность - Мордва',
        'Национальность - Немцы',
        'Национальность - Русские',
        #'Национальность - Таджики',
        'Национальность - Татары',
        #'Национальность - Удмурты',
        #'Национальность - Украинцы',
        #'Национальность - Чуваши',
        #'Национальность - Эстонцы',
        #'Национальность - Азия / Кавказ',
        'Национальность - Русские / Белорусы / Украинцы',
        
        'Религия - Атеист / агностик',
        #'Религия - Другое',
        #'Религия - Индуизм',
        #'Религия - Ислам',
        'Религия - Нет',
        'Религия - Христианство',
        #'Религия - Индуизм / Ислам / Другое',
        'Религия - Верующий',
        
        #'Образование - начальная школа',
        #'Образование - среднее',
        #'Образование - профессиональное училище',
        #'Образование - ВУЗ',
        'Образование - Уровень',
        
        'Профессия - ведение домашнего хозяйства',
        #'Профессия - вооруженные силы',
        'Профессия - дипломированные специалисты',
        'Профессия - квалифицированные работники сельского хозяйства и рыболовного',
        'Профессия - низкоквалифицированные работники',
        #'Профессия - операторы и монтажники установок и машинного оборудования',
        #'Профессия - законотворцы / менеджеры',
        'Профессия - сфера обслуживания',
        'Профессия - ремесленники и представители других отраслей промышленности',
        'Профессия - служащие',
        'Профессия - техники и младшие специалисты',
        'Профессия - военные / служащие / управление',
        'Профессия - промышленность',
        'Профессия - низкая квалификация',
        
        'Вы работаете?',
        'Выход на пенсию',
        'Без работы и не на пенсии',
        'Прекращение работы по болезни',

        'Сахарный диабет',
        #'Гепатит',
        'Онкология',
        'Хроническое заболевание легких',
        #'Бронхиальная астма',
        'Туберкулез легких',
        #'ВИЧ/СПИД',

        'Болезнь легких',
        #'Инфекционная болезнь',
        'Хроническая болезнь',
        
        'Регулярный прием лекарственных средств',
        #'Регулярный прием лекарственных средств без болезней из опроса',

        'Травмы за год',
        'Переломы',
        'Травмы / переломы',

        'Статус Курения - Бросил(а)',
        #'Статус Курения - Курит',
        #'Статус Курения - Никогда не курил(а)',
        'Возраст курения',
        'Сигарет в день',
        'Сигарет в день (актив)',
        'Пассивное курение',
        'Частота пасс кур',
        'Активное или пассивное курение',
        
        #'Алкоголь - никогда не употреблял',
        'Алкоголь - ранее употреблял',
        'Алкоголь - употребляю в настоящее время',
        'Возраст алког',

        'Без вредных привычек',
        'Бросил вредную привычку',
        'Макс. возраст вредной привычки',

        'Время засыпания',
        'Время пробуждения',
        'Продолжительность сна',
        'Сон после обеда',
        
        'Спорт клубы',
        'Религия клубы',

        'Больной',
        'Идеальное здоровье',
        'Само совершенство',
    ],
    'Прочие заболевания сердца': [
        #'Пол - М',

        'Семья - в браке в настоящее время',
        'Семья - в разводе',
        'Семья - вдовец / вдова',
        #'Семья - гражданский брак / проживание с партнером',
        'Семья - никогда не был(а) в браке',
        #'Семья - раздельное проживание (официально не разведены)',
        'Семья - живет один',
        
        #'Одинокий мужчина',
        #'Одинокая женщина',

        'Этнос - европейская',
        #'Этнос - другая азиатская',
        #'Этнос - прочее',
        
        #'Национальность - Азербайджанцы',
        #'Национальность - Армяне',
        #'Национальность - Башкиры',
        #'Национальность - Белорусы',
        #'Национальность - Буряты',
        #'Национальность - Другие национальности',
        #'Национальность - Евреи',
        #'Национальность - Казахи',
        #'Национальность - Киргизы',
        #'Национальность - Лезгины',
        #'Национальность - Молдаване',
        #'Национальность - Мордва',
        #'Национальность - Немцы',
        'Национальность - Русские',
        #'Национальность - Таджики',
        #'Национальность - Татары',
        #'Национальность - Удмурты',
        #'Национальность - Украинцы',
        #'Национальность - Чуваши',
        #'Национальность - Эстонцы',
        #'Национальность - Азия / Кавказ',
        'Национальность - Русские / Белорусы / Украинцы',
        
        'Религия - Атеист / агностик',
        #'Религия - Другое',
        #'Религия - Индуизм',
        #'Религия - Ислам',
        'Религия - Нет',
        'Религия - Христианство',
        #'Религия - Индуизм / Ислам / Другое',
        'Религия - Верующий',
        
        #'Образование - начальная школа',
        #'Образование - среднее',
        #'Образование - профессиональное училище',
        #'Образование - ВУЗ',
        'Образование - Уровень',
        
        #'Профессия - ведение домашнего хозяйства',
        #'Профессия - вооруженные силы',
        'Профессия - дипломированные специалисты',
        'Профессия - квалифицированные работники сельского хозяйства и рыболовного',
        'Профессия - низкоквалифицированные работники',
        'Профессия - операторы и монтажники установок и машинного оборудования',
        'Профессия - законотворцы / менеджеры',
        'Профессия - сфера обслуживания',
        'Профессия - ремесленники и представители других отраслей промышленности',
        'Профессия - служащие',
        'Профессия - техники и младшие специалисты',
        #'Профессия - военные / служащие / управление',
        'Профессия - промышленность',
        'Профессия - низкая квалификация',
        
        'Вы работаете?',
        'Выход на пенсию',
        'Без работы и не на пенсии',
        'Прекращение работы по болезни',

        #'Сахарный диабет',
        #'Гепатит',
        'Онкология',
        'Хроническое заболевание легких',
        'Бронхиальная астма',
        'Туберкулез легких',
        #'ВИЧ/СПИД',

        'Болезнь легких',
        #'Инфекционная болезнь',
        'Хроническая болезнь',
        
        'Регулярный прием лекарственных средств',
        'Регулярный прием лекарственных средств без болезней из опроса',

        'Травмы за год',
        #'Переломы',
        'Травмы / переломы',

        'Статус Курения - Бросил(а)',
        'Статус Курения - Курит',
        #'Статус Курения - Никогда не курил(а)',
        'Возраст курения',
        'Сигарет в день',
        'Сигарет в день (актив)',
        'Пассивное курение',
        'Частота пасс кур',
        'Активное или пассивное курение',
        
        'Алкоголь - никогда не употреблял',
        'Алкоголь - ранее употреблял',
        'Алкоголь - употребляю в настоящее время',
        'Возраст алког',

        'Без вредных привычек',
        'Бросил вредную привычку',
        'Макс. возраст вредной привычки',

        'Время засыпания',
        'Время пробуждения',
        'Продолжительность сна',
        'Сон после обеда',
        
        'Спорт клубы',
        'Религия клубы',

        'Больной',
        'Идеальное здоровье',
        #'Само совершенство',
    ],
}


XGBOOST_PRED_TRESHOLDS = {
    'Артериальная гипертензия': 0.5,
    'ОНМК': 0.04,
    'Стенокардия, ИБС, инфаркт миокарда': 0.1,
    'Сердечная недостаточность': 0.1,
    'Прочие заболевания сердца': 0.1,
}


XGBOOST_PARAMS = {
    'Артериальная гипертензия': {
        'objective': 'binary:logistic',
        'max_bin': 10,
        'max_depth': 3,
        'colsample_bylevel': 0.84,
        'tree_method': 'hist',
        'learning_rate': 0.03,
        'seed': 1,
        'nthread': 2,
    },
    'ОНМК': {
        'objective': 'binary:logistic',
        'max_bin': 15,
        'max_depth': 6,
        'tree_method': 'hist',
        'learning_rate': 0.03,
        'seed': 1,
        'nthread': 2,
    },
    'Стенокардия, ИБС, инфаркт миокарда': {
        'objective': 'binary:logistic',
        'max_bin': 26,
        'max_depth': 4,
        'tree_method': 'hist',
        'learning_rate': 0.03,
        'seed': 1,
        'nthread': 2,
    },
    'Сердечная недостаточность': {
        'objective': 'binary:logistic',
        'max_depth': 3,
        'tree_method': 'hist',
        'learning_rate': 0.03,
        'seed': 1,
        'nthread': 2,
    },
    'Прочие заболевания сердца': {
        'objective': 'binary:logistic',
        'max_bin': 16,
        'max_depth': 6,
        'tree_method': 'hist',
        'learning_rate': 0.03,
        'seed': 1,
        'nthread': 2,
    },
}


XGBOOST_TREE_COUNT = 500


TABNET_FEATURE_NAMES = {
    'Артериальная гипертензия': [
        'Пол - М',

        'Семья - в браке в настоящее время',
        'Семья - в разводе',
        'Семья - вдовец / вдова',
        'Семья - гражданский брак / проживание с партнером',
        'Семья - никогда не был(а) в браке',
        #'Семья - раздельное проживание (официально не разведены)',
        'Семья - живет один',
        
        'Одинокий мужчина',
        'Одинокая женщина',

        'Этнос - европейская',
        'Этнос - другая азиатская',
        'Этнос - прочее',
        
        #'Национальность - Азербайджанцы',
        #'Национальность - Армяне',
        #'Национальность - Башкиры',
        #'Национальность - Белорусы',
        #'Национальность - Буряты',
        #'Национальность - Другие национальности',
        #'Национальность - Евреи',
        #'Национальность - Казахи',
        #'Национальность - Киргизы',
        #'Национальность - Лезгины',
        #'Национальность - Молдаване',
        #'Национальность - Мордва',
        'Национальность - Немцы',
        'Национальность - Русские',
        #'Национальность - Таджики',
        'Национальность - Татары',
        #'Национальность - Удмурты',
        'Национальность - Украинцы',
        'Национальность - Чуваши',
        #'Национальность - Эстонцы',
        'Национальность - Азия / Кавказ',
        'Национальность - Русские / Белорусы / Украинцы',
        
        'Религия - Атеист / агностик',
        #'Религия - Другое',
        #'Религия - Индуизм',
        'Религия - Ислам',
        'Религия - Нет',
        'Религия - Христианство',
        'Религия - Индуизм / Ислам / Другое',
        'Религия - Верующий',
        
        'Образование - начальная школа',
        'Образование - среднее',
        'Образование - профессиональное училище',
        'Образование - ВУЗ',
        'Образование - Уровень',
        
        'Профессия - ведение домашнего хозяйства',
        'Профессия - вооруженные силы',
        'Профессия - дипломированные специалисты',
        'Профессия - квалифицированные работники сельского хозяйства и рыболовного',
        'Профессия - низкоквалифицированные работники',
        'Профессия - операторы и монтажники установок и машинного оборудования',
        'Профессия - законотворцы / менеджеры',
        'Профессия - сфера обслуживания',
        'Профессия - ремесленники и представители других отраслей промышленности',
        'Профессия - служащие',
        'Профессия - техники и младшие специалисты',
        'Профессия - военные / служащие / управление',
        'Профессия - промышленность',
        'Профессия - низкая квалификация',
        
        'Вы работаете?',
        'Выход на пенсию',
        'Без работы и не на пенсии',
        'Прекращение работы по болезни',

        'Сахарный диабет',
        'Гепатит',
        'Онкология',
        'Хроническое заболевание легких',
        'Бронхиальная астма',
        'Туберкулез легких',
        #'ВИЧ/СПИД',

        'Болезнь легких',
        'Инфекционная болезнь',
        'Хроническая болезнь',
        
        'Регулярный прием лекарственных средств',
        'Регулярный прием лекарственных средств без болезней из опроса',

        'Травмы за год',
        'Переломы',
        'Травмы / переломы',

        'Статус Курения - Бросил(а)',
        'Статус Курения - Курит',
        'Статус Курения - Никогда не курил(а)',
        'Возраст курения',
        'Сигарет в день',
        'Сигарет в день (актив)',
        'Пассивное курение',
        'Частота пасс кур',
        'Активное или пассивное курение',
        
        'Алкоголь - никогда не употреблял',
        'Алкоголь - ранее употреблял',
        'Алкоголь - употребляю в настоящее время',
        'Возраст алког',

        'Без вредных привычек',
        'Бросил вредную привычку',
        'Макс. возраст вредной привычки',

        'Время засыпания',
        'Время пробуждения',
        'Продолжительность сна',
        'Сон после обеда',
        
        'Спорт клубы',
        'Религия клубы',

        'Больной',
        'Идеальное здоровье',
        'Само совершенство',
    ],
    'ОНМК': [
        'Пол - М',

        'Семья - в браке в настоящее время',
        'Семья - в разводе',
        'Семья - вдовец / вдова',
        'Семья - гражданский брак / проживание с партнером',
        'Семья - никогда не был(а) в браке',
        #'Семья - раздельное проживание (официально не разведены)',
        'Семья - живет один',
        
        'Одинокий мужчина',
        'Одинокая женщина',

        'Этнос - европейская',
        'Этнос - другая азиатская',
        'Этнос - прочее',
        
        #'Национальность - Азербайджанцы',
        #'Национальность - Армяне',
        #'Национальность - Башкиры',
        #'Национальность - Белорусы',
        #'Национальность - Буряты',
        #'Национальность - Другие национальности',
        #'Национальность - Евреи',
        #'Национальность - Казахи',
        #'Национальность - Киргизы',
        #'Национальность - Лезгины',
        #'Национальность - Молдаване',
        #'Национальность - Мордва',
        'Национальность - Немцы',
        'Национальность - Русские',
        #'Национальность - Таджики',
        'Национальность - Татары',
        #'Национальность - Удмурты',
        'Национальность - Украинцы',
        'Национальность - Чуваши',
        #'Национальность - Эстонцы',
        'Национальность - Азия / Кавказ',
        'Национальность - Русские / Белорусы / Украинцы',
        
        'Религия - Атеист / агностик',
        #'Религия - Другое',
        #'Религия - Индуизм',
        'Религия - Ислам',
        'Религия - Нет',
        'Религия - Христианство',
        'Религия - Индуизм / Ислам / Другое',
        'Религия - Верующий',
        
        'Образование - начальная школа',
        'Образование - среднее',
        'Образование - профессиональное училище',
        'Образование - ВУЗ',
        'Образование - Уровень',
        
        'Профессия - ведение домашнего хозяйства',
        'Профессия - вооруженные силы',
        'Профессия - дипломированные специалисты',
        'Профессия - квалифицированные работники сельского хозяйства и рыболовного',
        'Профессия - низкоквалифицированные работники',
        'Профессия - операторы и монтажники установок и машинного оборудования',
        'Профессия - законотворцы / менеджеры',
        'Профессия - сфера обслуживания',
        'Профессия - ремесленники и представители других отраслей промышленности',
        'Профессия - служащие',
        'Профессия - техники и младшие специалисты',
        'Профессия - военные / служащие / управление',
        'Профессия - промышленность',
        'Профессия - низкая квалификация',
        
        'Вы работаете?',
        'Выход на пенсию',
        'Без работы и не на пенсии',
        'Прекращение работы по болезни',

        'Сахарный диабет',
        'Гепатит',
        'Онкология',
        'Хроническое заболевание легких',
        'Бронхиальная астма',
        'Туберкулез легких',
        #'ВИЧ/СПИД',

        'Болезнь легких',
        'Инфекционная болезнь',
        'Хроническая болезнь',
        
        'Регулярный прием лекарственных средств',
        'Регулярный прием лекарственных средств без болезней из опроса',

        'Травмы за год',
        'Переломы',
        'Травмы / переломы',

        'Статус Курения - Бросил(а)',
        'Статус Курения - Курит',
        'Статус Курения - Никогда не курил(а)',
        'Возраст курения',
        'Сигарет в день',
        'Сигарет в день (актив)',
        'Пассивное курение',
        'Частота пасс кур',
        'Активное или пассивное курение',
        
        'Алкоголь - никогда не употреблял',
        'Алкоголь - ранее употреблял',
        'Алкоголь - употребляю в настоящее время',
        'Возраст алког',

        'Без вредных привычек',
        'Бросил вредную привычку',
        'Макс. возраст вредной привычки',

        'Время засыпания',
        'Время пробуждения',
        'Продолжительность сна',
        'Сон после обеда',
        
        'Спорт клубы',
        'Религия клубы',

        'Больной',
        'Идеальное здоровье',
        'Само совершенство',
    ],
    'Стенокардия, ИБС, инфаркт миокарда': [
        'Пол - М',

        'Семья - в браке в настоящее время',
        'Семья - в разводе',
        'Семья - вдовец / вдова',
        'Семья - гражданский брак / проживание с партнером',
        'Семья - никогда не был(а) в браке',
        #'Семья - раздельное проживание (официально не разведены)',
        'Семья - живет один',
        
        'Одинокий мужчина',
        'Одинокая женщина',

        'Этнос - европейская',
        'Этнос - другая азиатская',
        'Этнос - прочее',
        
        #'Национальность - Азербайджанцы',
        #'Национальность - Армяне',
        #'Национальность - Башкиры',
        #'Национальность - Белорусы',
        #'Национальность - Буряты',
        #'Национальность - Другие национальности',
        #'Национальность - Евреи',
        #'Национальность - Казахи',
        #'Национальность - Киргизы',
        #'Национальность - Лезгины',
        #'Национальность - Молдаване',
        #'Национальность - Мордва',
        'Национальность - Немцы',
        'Национальность - Русские',
        #'Национальность - Таджики',
        'Национальность - Татары',
        #'Национальность - Удмурты',
        'Национальность - Украинцы',
        'Национальность - Чуваши',
        #'Национальность - Эстонцы',
        'Национальность - Азия / Кавказ',
        'Национальность - Русские / Белорусы / Украинцы',
        
        'Религия - Атеист / агностик',
        #'Религия - Другое',
        #'Религия - Индуизм',
        'Религия - Ислам',
        'Религия - Нет',
        'Религия - Христианство',
        'Религия - Индуизм / Ислам / Другое',
        'Религия - Верующий',
        
        'Образование - начальная школа',
        'Образование - среднее',
        'Образование - профессиональное училище',
        'Образование - ВУЗ',
        'Образование - Уровень',
        
        'Профессия - ведение домашнего хозяйства',
        'Профессия - вооруженные силы',
        'Профессия - дипломированные специалисты',
        'Профессия - квалифицированные работники сельского хозяйства и рыболовного',
        'Профессия - низкоквалифицированные работники',
        'Профессия - операторы и монтажники установок и машинного оборудования',
        'Профессия - законотворцы / менеджеры',
        'Профессия - сфера обслуживания',
        'Профессия - ремесленники и представители других отраслей промышленности',
        'Профессия - служащие',
        'Профессия - техники и младшие специалисты',
        'Профессия - военные / служащие / управление',
        'Профессия - промышленность',
        'Профессия - низкая квалификация',
        
        'Вы работаете?',
        'Выход на пенсию',
        'Без работы и не на пенсии',
        'Прекращение работы по болезни',

        'Сахарный диабет',
        'Гепатит',
        'Онкология',
        'Хроническое заболевание легких',
        'Бронхиальная астма',
        'Туберкулез легких',
        #'ВИЧ/СПИД',

        'Болезнь легких',
        'Инфекционная болезнь',
        'Хроническая болезнь',
        
        'Регулярный прием лекарственных средств',
        'Регулярный прием лекарственных средств без болезней из опроса',

        'Травмы за год',
        'Переломы',
        'Травмы / переломы',

        'Статус Курения - Бросил(а)',
        'Статус Курения - Курит',
        'Статус Курения - Никогда не курил(а)',
        'Возраст курения',
        'Сигарет в день',
        'Сигарет в день (актив)',
        'Пассивное курение',
        'Частота пасс кур',
        'Активное или пассивное курение',
        
        'Алкоголь - никогда не употреблял',
        'Алкоголь - ранее употреблял',
        'Алкоголь - употребляю в настоящее время',
        'Возраст алког',

        'Без вредных привычек',
        'Бросил вредную привычку',
        'Макс. возраст вредной привычки',

        'Время засыпания',
        'Время пробуждения',
        'Продолжительность сна',
        'Сон после обеда',
        
        'Спорт клубы',
        'Религия клубы',

        'Больной',
        'Идеальное здоровье',
        'Само совершенство',
    ],
    'Сердечная недостаточность': [
        'Пол - М',

        'Семья - в браке в настоящее время',
        'Семья - в разводе',
        'Семья - вдовец / вдова',
        'Семья - гражданский брак / проживание с партнером',
        'Семья - никогда не был(а) в браке',
        #'Семья - раздельное проживание (официально не разведены)',
        'Семья - живет один',
        
        'Одинокий мужчина',
        'Одинокая женщина',

        'Этнос - европейская',
        'Этнос - другая азиатская',
        'Этнос - прочее',
        
        #'Национальность - Азербайджанцы',
        #'Национальность - Армяне',
        #'Национальность - Башкиры',
        #'Национальность - Белорусы',
        #'Национальность - Буряты',
        #'Национальность - Другие национальности',
        #'Национальность - Евреи',
        #'Национальность - Казахи',
        #'Национальность - Киргизы',
        #'Национальность - Лезгины',
        #'Национальность - Молдаване',
        #'Национальность - Мордва',
        'Национальность - Немцы',
        'Национальность - Русские',
        #'Национальность - Таджики',
        'Национальность - Татары',
        #'Национальность - Удмурты',
        'Национальность - Украинцы',
        'Национальность - Чуваши',
        #'Национальность - Эстонцы',
        'Национальность - Азия / Кавказ',
        'Национальность - Русские / Белорусы / Украинцы',
        
        'Религия - Атеист / агностик',
        #'Религия - Другое',
        #'Религия - Индуизм',
        'Религия - Ислам',
        'Религия - Нет',
        'Религия - Христианство',
        'Религия - Индуизм / Ислам / Другое',
        'Религия - Верующий',
        
        'Образование - начальная школа',
        'Образование - среднее',
        'Образование - профессиональное училище',
        'Образование - ВУЗ',
        'Образование - Уровень',
        
        'Профессия - ведение домашнего хозяйства',
        'Профессия - вооруженные силы',
        'Профессия - дипломированные специалисты',
        'Профессия - квалифицированные работники сельского хозяйства и рыболовного',
        'Профессия - низкоквалифицированные работники',
        'Профессия - операторы и монтажники установок и машинного оборудования',
        'Профессия - законотворцы / менеджеры',
        'Профессия - сфера обслуживания',
        'Профессия - ремесленники и представители других отраслей промышленности',
        'Профессия - служащие',
        'Профессия - техники и младшие специалисты',
        'Профессия - военные / служащие / управление',
        'Профессия - промышленность',
        'Профессия - низкая квалификация',
        
        'Вы работаете?',
        'Выход на пенсию',
        'Без работы и не на пенсии',
        'Прекращение работы по болезни',

        'Сахарный диабет',
        'Гепатит',
        'Онкология',
        'Хроническое заболевание легких',
        'Бронхиальная астма',
        'Туберкулез легких',
        #'ВИЧ/СПИД',

        'Болезнь легких',
        'Инфекционная болезнь',
        'Хроническая болезнь',
        
        'Регулярный прием лекарственных средств',
        'Регулярный прием лекарственных средств без болезней из опроса',

        'Травмы за год',
        'Переломы',
        'Травмы / переломы',

        'Статус Курения - Бросил(а)',
        'Статус Курения - Курит',
        'Статус Курения - Никогда не курил(а)',
        'Возраст курения',
        'Сигарет в день',
        'Сигарет в день (актив)',
        'Пассивное курение',
        'Частота пасс кур',
        'Активное или пассивное курение',
        
        'Алкоголь - никогда не употреблял',
        'Алкоголь - ранее употреблял',
        'Алкоголь - употребляю в настоящее время',
        'Возраст алког',

        'Без вредных привычек',
        'Бросил вредную привычку',
        'Макс. возраст вредной привычки',

        'Время засыпания',
        'Время пробуждения',
        'Продолжительность сна',
        'Сон после обеда',
        
        'Спорт клубы',
        'Религия клубы',

        'Больной',
        'Идеальное здоровье',
        'Само совершенство',
    ],
    'Прочие заболевания сердца': [
        'Пол - М',

        'Семья - в браке в настоящее время',
        'Семья - в разводе',
        'Семья - вдовец / вдова',
        'Семья - гражданский брак / проживание с партнером',
        'Семья - никогда не был(а) в браке',
        #'Семья - раздельное проживание (официально не разведены)',
        'Семья - живет один',
        
        'Одинокий мужчина',
        'Одинокая женщина',

        'Этнос - европейская',
        'Этнос - другая азиатская',
        'Этнос - прочее',
        
        #'Национальность - Азербайджанцы',
        #'Национальность - Армяне',
        #'Национальность - Башкиры',
        #'Национальность - Белорусы',
        #'Национальность - Буряты',
        #'Национальность - Другие национальности',
        #'Национальность - Евреи',
        #'Национальность - Казахи',
        #'Национальность - Киргизы',
        #'Национальность - Лезгины',
        #'Национальность - Молдаване',
        #'Национальность - Мордва',
        'Национальность - Немцы',
        'Национальность - Русские',
        #'Национальность - Таджики',
        'Национальность - Татары',
        #'Национальность - Удмурты',
        'Национальность - Украинцы',
        'Национальность - Чуваши',
        #'Национальность - Эстонцы',
        'Национальность - Азия / Кавказ',
        'Национальность - Русские / Белорусы / Украинцы',
        
        'Религия - Атеист / агностик',
        #'Религия - Другое',
        #'Религия - Индуизм',
        'Религия - Ислам',
        'Религия - Нет',
        'Религия - Христианство',
        'Религия - Индуизм / Ислам / Другое',
        'Религия - Верующий',
        
        'Образование - начальная школа',
        'Образование - среднее',
        'Образование - профессиональное училище',
        'Образование - ВУЗ',
        'Образование - Уровень',
        
        'Профессия - ведение домашнего хозяйства',
        'Профессия - вооруженные силы',
        'Профессия - дипломированные специалисты',
        'Профессия - квалифицированные работники сельского хозяйства и рыболовного',
        'Профессия - низкоквалифицированные работники',
        'Профессия - операторы и монтажники установок и машинного оборудования',
        'Профессия - законотворцы / менеджеры',
        'Профессия - сфера обслуживания',
        'Профессия - ремесленники и представители других отраслей промышленности',
        'Профессия - служащие',
        'Профессия - техники и младшие специалисты',
        'Профессия - военные / служащие / управление',
        'Профессия - промышленность',
        'Профессия - низкая квалификация',
        
        'Вы работаете?',
        'Выход на пенсию',
        'Без работы и не на пенсии',
        'Прекращение работы по болезни',

        'Сахарный диабет',
        'Гепатит',
        'Онкология',
        'Хроническое заболевание легких',
        'Бронхиальная астма',
        'Туберкулез легких',
        #'ВИЧ/СПИД',

        'Болезнь легких',
        'Инфекционная болезнь',
        'Хроническая болезнь',
        
        'Регулярный прием лекарственных средств',
        'Регулярный прием лекарственных средств без болезней из опроса',

        'Травмы за год',
        'Переломы',
        'Травмы / переломы',

        'Статус Курения - Бросил(а)',
        'Статус Курения - Курит',
        'Статус Курения - Никогда не курил(а)',
        'Возраст курения',
        'Сигарет в день',
        'Сигарет в день (актив)',
        'Пассивное курение',
        'Частота пасс кур',
        'Активное или пассивное курение',
        
        'Алкоголь - никогда не употреблял',
        'Алкоголь - ранее употреблял',
        'Алкоголь - употребляю в настоящее время',
        'Возраст алког',

        'Без вредных привычек',
        'Бросил вредную привычку',
        'Макс. возраст вредной привычки',

        'Время засыпания',
        'Время пробуждения',
        'Продолжительность сна',
        'Сон после обеда',
        
        'Спорт клубы',
        'Религия клубы',

        'Больной',
        'Идеальное здоровье',
        'Само совершенство',
    ],
}


TABNET_PRED_TRESHOLDS = {
    'Артериальная гипертензия': 0.5, # 46.70 %
    'ОНМК': 0.04, # 4.29 %
    'Стенокардия, ИБС, инфаркт миокарда': 0.12, # 12.25 %
    'Сердечная недостаточность': 0.1, # 10.05 %
    'Прочие заболевания сердца': 0.1, # 9.01 %
}


TABNET_PARAMS = {
    'Артериальная гипертензия': {
        'seed': 1,
        'verbose': 0,
        'n_d': 4,
        'n_a': 4,
    },
    'ОНМК': {
        'seed': 1,
        'verbose': 0,
        'n_d': 4,
        'n_a': 4,
    },
    'Стенокардия, ИБС, инфаркт миокарда': {
        'seed': 1,
        'verbose': 0,
        'n_d': 4,
        'n_a': 4,
    },
    'Сердечная недостаточность': {
        'seed': 1,
        'verbose': 0,
        'n_d': 4, #2
        'n_a': 4, #2
        #'gamma': 2.0,
    },
    'Прочие заболевания сердца': {
        'seed': 1,
        'verbose': 0,
        'n_d': 4, #2
        'n_a': 4, #2
    },
}


TABNET_EPOCH_COUNT = 200


LIGHTGBM_FEATURE_NAMES = {
    'Артериальная гипертензия': [
        'Пол - М',

        'Семья - в браке в настоящее время',
        'Семья - в разводе',
        'Семья - вдовец / вдова',
        #'Семья - гражданский брак / проживание с партнером',
        #'Семья - никогда не был(а) в браке',
        #'Семья - раздельное проживание (официально не разведены)',
        'Семья - живет один',
        
        #'Одинокий мужчина',
        #'Одинокая женщина',

        #'Этнос - европейская',
        #'Этнос - другая азиатская',
        #'Этнос - прочее',
        
        #'Национальность - Азербайджанцы',
        #'Национальность - Армяне',
        #'Национальность - Башкиры',
        #'Национальность - Белорусы',
        #'Национальность - Буряты',
        #'Национальность - Другие национальности',
        #'Национальность - Евреи',
        #'Национальность - Казахи',
        #'Национальность - Киргизы',
        #'Национальность - Лезгины',
        #'Национальность - Молдаване',
        #'Национальность - Мордва',
        #'Национальность - Немцы',
        'Национальность - Русские',
        #'Национальность - Таджики',
        #'Национальность - Татары',
        #'Национальность - Удмурты',
        #'Национальность - Украинцы',
        #'Национальность - Чуваши',
        #'Национальность - Эстонцы',
        #'Национальность - Азия / Кавказ',
        'Национальность - Русские / Белорусы / Украинцы',
        
        'Религия - Атеист / агностик',
        #'Религия - Другое',
        #'Религия - Индуизм',
        #'Религия - Ислам',
        'Религия - Нет',
        'Религия - Христианство',
        #'Религия - Индуизм / Ислам / Другое',
        'Религия - Верующий',
        
        #'Образование - начальная школа',
        #'Образование - среднее',
        #'Образование - профессиональное училище',
        #'Образование - ВУЗ',
        'Образование - Уровень',
        
        'Профессия - ведение домашнего хозяйства',
        #'Профессия - вооруженные силы',
        'Профессия - дипломированные специалисты',
        #'Профессия - квалифицированные работники сельского хозяйства и рыболовного',
        #'Профессия - низкоквалифицированные работники',
        'Профессия - операторы и монтажники установок и машинного оборудования',
        #'Профессия - законотворцы / менеджеры',
        #'Профессия - сфера обслуживания',
        'Профессия - ремесленники и представители других отраслей промышленности',
        'Профессия - служащие',
        'Профессия - техники и младшие специалисты',
        'Профессия - военные / служащие / управление',
        'Профессия - промышленность',
        'Профессия - низкая квалификация',
        
        'Вы работаете?',
        'Выход на пенсию',
        'Без работы и не на пенсии',
        'Прекращение работы по болезни',

        'Сахарный диабет',
        #'Гепатит',
        #'Онкология',
        'Хроническое заболевание легких',
        #'Бронхиальная астма',
        #'Туберкулез легких',
        #'ВИЧ/СПИД',

        'Болезнь легких',
        'Инфекционная болезнь',
        'Хроническая болезнь',
        
        'Регулярный прием лекарственных средств',
        'Регулярный прием лекарственных средств без болезней из опроса',

        'Травмы за год',
        'Переломы',
        'Травмы / переломы',

        'Статус Курения - Бросил(а)',
        'Статус Курения - Курит',
        #'Статус Курения - Никогда не курил(а)',
        'Возраст курения',
        'Сигарет в день',
        'Сигарет в день (актив)',
        'Пассивное курение',
        'Частота пасс кур',
        'Активное или пассивное курение',
        
        'Алкоголь - никогда не употреблял',
        'Алкоголь - ранее употреблял',
        'Алкоголь - употребляю в настоящее время',
        'Возраст алког',

        #'Без вредных привычек',
        'Бросил вредную привычку',
        'Макс. возраст вредной привычки',

        'Время засыпания',
        'Время пробуждения',
        'Продолжительность сна',
        'Сон после обеда',
        
        'Спорт клубы',
        'Религия клубы',

        'Больной',
        'Идеальное здоровье',
        #'Само совершенство',
    ],
    'ОНМК': [
        'Пол - М',

        'Семья - в браке в настоящее время',
        'Семья - в разводе',
        'Семья - вдовец / вдова',
        'Семья - гражданский брак / проживание с партнером',
        #'Семья - никогда не был(а) в браке',
        #'Семья - раздельное проживание (официально не разведены)',
        'Семья - живет один',
        
        'Одинокий мужчина',
        'Одинокая женщина',

        'Этнос - европейская',
        #'Этнос - другая азиатская',
        #'Этнос - прочее',
        
        #'Национальность - Азербайджанцы',
        #'Национальность - Армяне',
        #'Национальность - Башкиры',
        #'Национальность - Белорусы',
        #'Национальность - Буряты',
        #'Национальность - Другие национальности',
        #'Национальность - Евреи',
        #'Национальность - Казахи',
        #'Национальность - Киргизы',
        #'Национальность - Лезгины',
        #'Национальность - Молдаване',
        #'Национальность - Мордва',
        #'Национальность - Немцы',
        'Национальность - Русские',
        #'Национальность - Таджики',
        #'Национальность - Татары',
        #'Национальность - Удмурты',
        #'Национальность - Украинцы',
        #'Национальность - Чуваши',
        #'Национальность - Эстонцы',
        #'Национальность - Азия / Кавказ',
        #'Национальность - Русские / Белорусы / Украинцы',
        
        'Религия - Атеист / агностик',
        #'Религия - Другое',
        #'Религия - Индуизм',
        #'Религия - Ислам',
        'Религия - Нет',
        'Религия - Христианство',
        #'Религия - Индуизм / Ислам / Другое',
        #'Религия - Верующий',
        
        #'Образование - начальная школа',
        #'Образование - среднее',
        #'Образование - профессиональное училище',
        #'Образование - ВУЗ',
        'Образование - Уровень',
        
        #'Профессия - ведение домашнего хозяйства',
        #'Профессия - вооруженные силы',
        'Профессия - дипломированные специалисты',
        #'Профессия - квалифицированные работники сельского хозяйства и рыболовного',
        'Профессия - низкоквалифицированные работники',
        'Профессия - операторы и монтажники установок и машинного оборудования',
        'Профессия - законотворцы / менеджеры',
        'Профессия - сфера обслуживания',
        #'Профессия - ремесленники и представители других отраслей промышленности',
        #'Профессия - служащие',
        'Профессия - техники и младшие специалисты',
        'Профессия - военные / служащие / управление',
        'Профессия - промышленность',
        #'Профессия - низкая квалификация',
        
        'Вы работаете?',
        'Выход на пенсию',
        'Без работы и не на пенсии',
        'Прекращение работы по болезни',

        'Сахарный диабет',
        #'Гепатит',
        'Онкология',
        'Хроническое заболевание легких',
        'Бронхиальная астма',
        #'Туберкулез легких',
        #'ВИЧ/СПИД',

        'Болезнь легких',
        'Инфекционная болезнь',
        'Хроническая болезнь',
        
        'Регулярный прием лекарственных средств',
        'Регулярный прием лекарственных средств без болезней из опроса',

        'Травмы за год',
        'Переломы',
        'Травмы / переломы',

        'Статус Курения - Бросил(а)',
        'Статус Курения - Курит',
        #'Статус Курения - Никогда не курил(а)',
        'Возраст курения',
        'Сигарет в день',
        'Сигарет в день (актив)',
        'Пассивное курение',
        'Частота пасс кур',
        'Активное или пассивное курение',
        
        #'Алкоголь - никогда не употреблял',
        'Алкоголь - ранее употреблял',
        'Алкоголь - употребляю в настоящее время',
        'Возраст алког',

        #'Без вредных привычек',
        'Бросил вредную привычку',
        'Макс. возраст вредной привычки',

        'Время засыпания',
        'Время пробуждения',
        'Продолжительность сна',
        'Сон после обеда',
        
        'Спорт клубы',
        'Религия клубы',

        'Больной',
        'Идеальное здоровье',
        #'Само совершенство',
    ],
    'Стенокардия, ИБС, инфаркт миокарда': [
        'Пол - М',

        'Семья - в браке в настоящее время',
        'Семья - в разводе',
        'Семья - вдовец / вдова',
        #'Семья - гражданский брак / проживание с партнером',
        'Семья - никогда не был(а) в браке',
        #'Семья - раздельное проживание (официально не разведены)',
        #'Семья - живет один',
        
        #'Одинокий мужчина',
        #'Одинокая женщина',

        #'Этнос - европейская',
        #'Этнос - другая азиатская',
        #'Этнос - прочее',
        
        #'Национальность - Азербайджанцы',
        #'Национальность - Армяне',
        #'Национальность - Башкиры',
        #'Национальность - Белорусы',
        #'Национальность - Буряты',
        #'Национальность - Другие национальности',
        #'Национальность - Евреи',
        #'Национальность - Казахи',
        #'Национальность - Киргизы',
        #'Национальность - Лезгины',
        #'Национальность - Молдаване',
        #'Национальность - Мордва',
        #'Национальность - Немцы',
        #'Национальность - Русские',
        #'Национальность - Таджики',
        #'Национальность - Татары',
        #'Национальность - Удмурты',
        #'Национальность - Украинцы',
        #'Национальность - Чуваши',
        #'Национальность - Эстонцы',
        #'Национальность - Азия / Кавказ',
        'Национальность - Русские / Белорусы / Украинцы',
        
        'Религия - Атеист / агностик',
        #'Религия - Другое',
        #'Религия - Индуизм',
        #'Религия - Ислам',
        'Религия - Нет',
        #'Религия - Христианство',
        #'Религия - Индуизм / Ислам / Другое',
        'Религия - Верующий',
        
        #'Образование - начальная школа',
        #'Образование - среднее',
        #'Образование - профессиональное училище',
        #'Образование - ВУЗ',
        'Образование - Уровень',
        
        #'Профессия - ведение домашнего хозяйства',
        #'Профессия - вооруженные силы',
        'Профессия - дипломированные специалисты',
        #'Профессия - квалифицированные работники сельского хозяйства и рыболовного',
        'Профессия - низкоквалифицированные работники',
        'Профессия - операторы и монтажники установок и машинного оборудования',
        'Профессия - законотворцы / менеджеры',
        'Профессия - сфера обслуживания',
        'Профессия - ремесленники и представители других отраслей промышленности',
        'Профессия - служащие',
        'Профессия - техники и младшие специалисты',
        'Профессия - военные / служащие / управление',
        'Профессия - промышленность',
        'Профессия - низкая квалификация',
        
        'Вы работаете?',
        'Выход на пенсию',
        'Без работы и не на пенсии',
        'Прекращение работы по болезни',

        'Сахарный диабет',
        #'Гепатит',
        'Онкология',
        'Хроническое заболевание легких',
        'Бронхиальная астма',
        #'Туберкулез легких',
        #'ВИЧ/СПИД',

        'Болезнь легких',
        'Инфекционная болезнь',
        'Хроническая болезнь',
        
        'Регулярный прием лекарственных средств',
        'Регулярный прием лекарственных средств без болезней из опроса',

        'Травмы за год',
        'Переломы',
        'Травмы / переломы',

        'Статус Курения - Бросил(а)',
        'Статус Курения - Курит',
        #'Статус Курения - Никогда не курил(а)',
        'Возраст курения',
        'Сигарет в день',
        'Сигарет в день (актив)',
        #'Пассивное курение',
        'Частота пасс кур',
        'Активное или пассивное курение',
        
        #'Алкоголь - никогда не употреблял',
        'Алкоголь - ранее употреблял',
        'Алкоголь - употребляю в настоящее время',
        'Возраст алког',

        'Без вредных привычек',
        'Бросил вредную привычку',
        'Макс. возраст вредной привычки',

        'Время засыпания',
        'Время пробуждения',
        'Продолжительность сна',
        'Сон после обеда',
        
        'Спорт клубы',
        #'Религия клубы',

        'Больной',
        #'Идеальное здоровье',
        #'Само совершенство',
    ],
    'Сердечная недостаточность': [
        'Пол - М',

        'Семья - в браке в настоящее время',
        'Семья - в разводе',
        'Семья - вдовец / вдова',
        'Семья - гражданский брак / проживание с партнером',
        'Семья - никогда не был(а) в браке',
        #'Семья - раздельное проживание (официально не разведены)',
        'Семья - живет один',
        
        'Одинокий мужчина',
        'Одинокая женщина',

        #'Этнос - европейская',
        #'Этнос - другая азиатская',
        #'Этнос - прочее',
        
        #'Национальность - Азербайджанцы',
        #'Национальность - Армяне',
        #'Национальность - Башкиры',
        #'Национальность - Белорусы',
        #'Национальность - Буряты',
        #'Национальность - Другие национальности',
        #'Национальность - Евреи',
        #'Национальность - Казахи',
        #'Национальность - Киргизы',
        #'Национальность - Лезгины',
        #'Национальность - Молдаване',
        #'Национальность - Мордва',
        #'Национальность - Немцы',
        #'Национальность - Русские',
        #'Национальность - Таджики',
        #'Национальность - Татары',
        #'Национальность - Удмурты',
        #'Национальность - Украинцы',
        #'Национальность - Чуваши',
        #'Национальность - Эстонцы',
        #'Национальность - Азия / Кавказ',
        'Национальность - Русские / Белорусы / Украинцы',
        
        'Религия - Атеист / агностик',
        #'Религия - Другое',
        #'Религия - Индуизм',
        #'Религия - Ислам',
        'Религия - Нет',
        'Религия - Христианство',
        #'Религия - Индуизм / Ислам / Другое',
        'Религия - Верующий',
        
        #'Образование - начальная школа',
        #'Образование - среднее',
        #'Образование - профессиональное училище',
        #'Образование - ВУЗ',
        'Образование - Уровень',
        
        #'Профессия - ведение домашнего хозяйства',
        #'Профессия - вооруженные силы',
        'Профессия - дипломированные специалисты',
        #'Профессия - квалифицированные работники сельского хозяйства и рыболовного',
        'Профессия - низкоквалифицированные работники',
        #'Профессия - операторы и монтажники установок и машинного оборудования',
        'Профессия - законотворцы / менеджеры',
        #'Профессия - сфера обслуживания',
        'Профессия - ремесленники и представители других отраслей промышленности',
        'Профессия - служащие',
        #'Профессия - техники и младшие специалисты',
        'Профессия - военные / служащие / управление',
        'Профессия - промышленность',
        'Профессия - низкая квалификация',
        
        'Вы работаете?',
        'Выход на пенсию',
        'Без работы и не на пенсии',
        'Прекращение работы по болезни',

        'Сахарный диабет',
        #'Гепатит',
        #'Онкология',
        'Хроническое заболевание легких',
        'Бронхиальная астма',
        #'Туберкулез легких',
        #'ВИЧ/СПИД',

        'Болезнь легких',
        #'Инфекционная болезнь',
        #'Хроническая болезнь',
        
        'Регулярный прием лекарственных средств',
        'Регулярный прием лекарственных средств без болезней из опроса',

        'Травмы за год',
        'Переломы',
        'Травмы / переломы',

        'Статус Курения - Бросил(а)',
        #'Статус Курения - Курит',
        #'Статус Курения - Никогда не курил(а)',
        'Возраст курения',
        'Сигарет в день',
        'Сигарет в день (актив)',
        'Пассивное курение',
        #'Частота пасс кур',
        'Активное или пассивное курение',
        
        #'Алкоголь - никогда не употреблял',
        'Алкоголь - ранее употреблял',
        'Алкоголь - употребляю в настоящее время',
        'Возраст алког',

        'Без вредных привычек',
        #'Бросил вредную привычку',
        'Макс. возраст вредной привычки',

        'Время засыпания',
        'Время пробуждения',
        'Продолжительность сна',
        'Сон после обеда',
        
        'Спорт клубы',
        #'Религия клубы',

        #'Больной',
        'Идеальное здоровье',
        #'Само совершенство',
    ],
    'Прочие заболевания сердца': [
        'Пол - М',

        'Семья - в браке в настоящее время',
        'Семья - в разводе',
        'Семья - вдовец / вдова',
        'Семья - гражданский брак / проживание с партнером',
        'Семья - никогда не был(а) в браке',
        #'Семья - раздельное проживание (официально не разведены)',
        'Семья - живет один',
        
        'Одинокий мужчина',
        'Одинокая женщина',

        'Этнос - европейская',
        #'Этнос - другая азиатская',
        #'Этнос - прочее',
        
        #'Национальность - Азербайджанцы',
        #'Национальность - Армяне',
        #'Национальность - Башкиры',
        #'Национальность - Белорусы',
        #'Национальность - Буряты',
        #'Национальность - Другие национальности',
        #'Национальность - Евреи',
        #'Национальность - Казахи',
        #'Национальность - Киргизы',
        #'Национальность - Лезгины',
        #'Национальность - Молдаване',
        #'Национальность - Мордва',
        #'Национальность - Немцы',
        #'Национальность - Русские',
        #'Национальность - Таджики',
        #'Национальность - Татары',
        #'Национальность - Удмурты',
        #'Национальность - Украинцы',
        #'Национальность - Чуваши',
        #'Национальность - Эстонцы',
        #'Национальность - Азия / Кавказ',
        'Национальность - Русские / Белорусы / Украинцы',
        
        'Религия - Атеист / агностик',
        #'Религия - Другое',
        #'Религия - Индуизм',
        #'Религия - Ислам',
        'Религия - Нет',
        'Религия - Христианство',
        #'Религия - Индуизм / Ислам / Другое',
        'Религия - Верующий',
        
        #'Образование - начальная школа',
        'Образование - среднее',
        'Образование - профессиональное училище',
        #'Образование - ВУЗ',
        'Образование - Уровень',
        
        'Профессия - ведение домашнего хозяйства',
        #'Профессия - вооруженные силы',
        'Профессия - дипломированные специалисты',
        #'Профессия - квалифицированные работники сельского хозяйства и рыболовного',
        'Профессия - низкоквалифицированные работники',
        'Профессия - операторы и монтажники установок и машинного оборудования',
        'Профессия - законотворцы / менеджеры',
        'Профессия - сфера обслуживания',
        'Профессия - ремесленники и представители других отраслей промышленности',
        'Профессия - служащие',
        'Профессия - техники и младшие специалисты',
        'Профессия - военные / служащие / управление',
        'Профессия - промышленность',
        'Профессия - низкая квалификация',
        
        'Вы работаете?',
        'Выход на пенсию',
        'Без работы и не на пенсии',
        'Прекращение работы по болезни',

        'Сахарный диабет',
        #'Гепатит',
        'Онкология',
        'Хроническое заболевание легких',
        'Бронхиальная астма',
        'Туберкулез легких',
        #'ВИЧ/СПИД',

        'Болезнь легких',
        'Инфекционная болезнь',
        'Хроническая болезнь',
        
        'Регулярный прием лекарственных средств',
        'Регулярный прием лекарственных средств без болезней из опроса',

        'Травмы за год',
        'Переломы',
        'Травмы / переломы',

        'Статус Курения - Бросил(а)',
        'Статус Курения - Курит',
        #'Статус Курения - Никогда не курил(а)',
        'Возраст курения',
        'Сигарет в день',
        'Сигарет в день (актив)',
        'Пассивное курение',
        'Частота пасс кур',
        'Активное или пассивное курение',
        
        'Алкоголь - никогда не употреблял',
        'Алкоголь - ранее употреблял',
        'Алкоголь - употребляю в настоящее время',
        'Возраст алког',

        'Без вредных привычек',
        'Бросил вредную привычку',
        'Макс. возраст вредной привычки',

        'Время засыпания',
        'Время пробуждения',
        'Продолжительность сна',
        'Сон после обеда',
        
        'Спорт клубы',
        'Религия клубы',

        'Больной',
        'Идеальное здоровье',
        #'Само совершенство',
    ],
}


LIGHTGBM_PRED_TRESHOLDS = {
    'Артериальная гипертензия': 0.5,
    'ОНМК': 0.04,
    'Стенокардия, ИБС, инфаркт миокарда': 0.12,
    'Сердечная недостаточность': 0.1,
    'Прочие заболевания сердца': 0.07,
}


LIGHTGBM_PARAMS = {
    'Артериальная гипертензия': {
        'objective': 'binary',
        'num_leaves': 4,
        'max_depth': -1,
        'colsample_bytree': 0.92,
        'max_bin': 4,
        'learning_rate': 0.1,
        'random_state': 1,
        'n_jobs': 2,
        'deterministic': True,
        'metric': 'custom',
        'first_metric_only': True,
    },
    'ОНМК': {
        'objective': 'binary',
        'num_leaves': 3,
        'max_depth': -1,
        'max_bin': 4,
        'learning_rate': 0.1,
        'random_state': 1,
        'n_jobs': 2,
        'deterministic': True,
        'metric': 'custom',
        'first_metric_only': True,
    },
    'Стенокардия, ИБС, инфаркт миокарда': {
        'objective': 'binary',
        'num_leaves': 4,
        'max_depth': -1,
        'max_bin': 4,
        'learning_rate': 0.1,
        'random_state': 1,
        'n_jobs': 2,
        'deterministic': True,
        'metric': 'custom',
        'first_metric_only': True,
    },
    'Сердечная недостаточность': {
        'objective': 'binary',
        'num_leaves': 4,
        'max_depth': -1,
        'max_bin': 4,
        'learning_rate': 0.1,
        'random_state': 1,
        'n_jobs': 2,
        'deterministic': True,
        'metric': 'custom',
        'first_metric_only': True,
    },
    'Прочие заболевания сердца': {
        'objective': 'binary',
        'num_leaves': 4,
        'max_depth': -1,
        'max_bin': 9,
        'learning_rate': 0.1,
        'random_state': 1,
        'n_jobs': 2,
        'deterministic': True,
        'metric': 'custom',
        'first_metric_only': True,
    },
}


LIGHTGBM_TREE_COUNT = 500


def create_features(data: pd.DataFrame, is_train_data: bool) -> pd.DataFrame:
    data = data.copy()
    if is_train_data:
        data['Пол'].fillna('Ж', inplace=True)  # 54-701-009-01
        data['Время засыпания'].replace('12:00:00', '00:00:00', inplace=True)  # 54-002-054-02
        data.loc[data['Частота пасс кур'].isna() == False, 'Пассивное курение'] = 1  # 54-001-079-01
    else:
        data['Статус Курения'].replace('Никогда не курил', 'Никогда не курил(а)', inplace=True)  # 54-701-037-01
        data['Время засыпания'].replace('09:00:00', '21:00:00', inplace=True)  # 54-602-001-01
        data['Время засыпания'].replace('00:00:30', '00:30:00', inplace=True)  # 54-103-014-01
        data['Время пробуждения'].replace('00:06:00', '06:00:00', inplace=True)
    
    # 54-501-009-02, 54-001-020-01, 54-002-044-01
    no_time = (data['Время засыпания'] == data['Время пробуждения'])
    data.loc[no_time, ['Время засыпания']] = '23:00:00'
    data.loc[no_time, ['Время пробуждения']] = '07:00:00'

    features = data[['ID']].copy()
    if is_train_data:
        for target in TARGETS:
            features[target] = data[target] == 1 

    base_features = [
        ('Пол - М', 'Пол', ['М']),
        ('Семья - в браке в настоящее время', 'Семья', ['в браке в настоящее время']),
        ('Семья - в разводе', 'Семья', ['в разводе']),
        ('Семья - вдовец / вдова', 'Семья', ['вдовец / вдова']),
        ('Семья - гражданский брак / проживание с партнером', 'Семья', ['гражданский брак / проживание с партнером']),
        ('Семья - никогда не был(а) в браке', 'Семья', ['никогда не был(а) в браке']),
        ('Семья - раздельное проживание (официально не разведены)', 'Семья', ['раздельное проживание (официально не разведены)']),
        ('Семья - живет один', 'Семья', ['в разводе', 'вдовец / вдова', 'никогда не был(а) в браке', 'раздельное проживание (официально не разведены)']),
        ('Этнос - европейская', 'Этнос', ['европейская']),
        ('Этнос - другая азиатская', 'Этнос', ['другая азиатская (Корея, Малайзия, Таиланд, Вьетнам, Казахстан, Киргизия, Туркмения, Узбекистан, Таджикистан)']),
        ('Этнос - прочее', 'Этнос', ['прочее (любая иная этно-расовая группа, не представленная выше)']),
        ('Национальность - Азербайджанцы', 'Национальность', ['Азербайджанцы']),
        ('Национальность - Армяне', 'Национальность', ['Армяне']),
        ('Национальность - Башкиры', 'Национальность', ['Башкиры']),
        ('Национальность - Белорусы', 'Национальность', ['Белорусы']),
        ('Национальность - Буряты', 'Национальность', ['Буряты']),
        ('Национальность - Другие национальности', 'Национальность', ['Другие национальности']),
        ('Национальность - Евреи', 'Национальность', ['Евреи']),
        ('Национальность - Казахи', 'Национальность', ['Казахи']),
        ('Национальность - Киргизы', 'Национальность', ['Киргизы']),
        ('Национальность - Лезгины', 'Национальность', ['Лезгины']),
        ('Национальность - Молдаване', 'Национальность', ['Молдаване']),
        ('Национальность - Мордва', 'Национальность', ['Мордва']),
        ('Национальность - Немцы', 'Национальность', ['Немцы']),
        ('Национальность - Русские', 'Национальность', ['Русские']),
        ('Национальность - Таджики', 'Национальность', ['Таджики']),
        ('Национальность - Татары', 'Национальность', ['Татары']),
        ('Национальность - Удмурты', 'Национальность', ['Удмурты']),
        ('Национальность - Украинцы', 'Национальность', ['Украинцы']),
        ('Национальность - Чуваши', 'Национальность', ['Чуваши']),
        ('Национальность - Эстонцы', 'Национальность', ['Эстонцы']),
        ('Национальность - Азия / Кавказ', 'Национальность', ['Азербайджанцы', 'Армяне', 'Казахи', 'Киргизы', 'Лезгины', 'Таджики']),
        ('Национальность - Русские / Белорусы / Украинцы', 'Национальность', ['Русские', 'Белорусы', 'Украинцы']),
        ('Религия - Атеист / агностик', 'Религия', ['Атеист / агностик']),
        ('Религия - Другое', 'Религия', ['Другое']),
        ('Религия - Индуизм', 'Религия', ['Индуизм']),
        ('Религия - Ислам', 'Религия', ['Ислам']),
        ('Религия - Нет', 'Религия', ['Нет']),
        ('Религия - Христианство', 'Религия', ['Христианство']),
        ('Религия - Индуизм / Ислам / Другое', 'Религия', ['Индуизм', 'Ислам', 'Другое']),
        ('Религия - Верующий', 'Религия', ['Другое', 'Индуизм', 'Ислам', 'Христианство']),
        ('Образование - начальная школа', 'Образование', ['2 - начальная школа']),
        ('Образование - среднее', 'Образование', ['3 - средняя школа / закон.среднее / выше среднего']),
        ('Образование - профессиональное училище', 'Образование', ['4 - профессиональное училище']),
        ('Образование - ВУЗ', 'Образование', ['5 - ВУЗ']),
        ('Профессия - ведение домашнего хозяйства', 'Профессия', ['ведение домашнего хозяйства']),
        ('Профессия - вооруженные силы', 'Профессия', ['вооруженные силы']),
        ('Профессия - дипломированные специалисты', 'Профессия', ['дипломированные специалисты']),
        ('Профессия - квалифицированные работники сельского хозяйства и рыболовного', 'Профессия', ['квалифицированные работники сельского хозяйства и рыболовного']),
        ('Профессия - низкоквалифицированные работники', 'Профессия', ['низкоквалифицированные работники']),
        ('Профессия - операторы и монтажники установок и машинного оборудования', 'Профессия', ['операторы и монтажники установок и машинного оборудования']),
        ('Профессия - законотворцы / менеджеры', 'Профессия', ['представители   законодат.   органов   власти,  высокопостав. долж.лица и менеджеры']),
        ('Профессия - сфера обслуживания', 'Профессия', ['работники,  занятые в сфере обслуживания, торговые работники магазинов и рынков']),
        ('Профессия - ремесленники и представители других отраслей промышленности', 'Профессия', ['ремесленники и представители других отраслей промышленности']),
        ('Профессия - служащие', 'Профессия', ['служащие']),
        ('Профессия - техники и младшие специалисты', 'Профессия', ['техники и младшие специалисты']),
        ('Профессия - военные / служащие / управление', 'Профессия', ['вооруженные силы', 'представители   законодат.   органов   власти,  высокопостав. долж.лица и менеджеры', 'служащие']),
        ('Профессия - промышленность', 'Профессия', ['операторы и монтажники установок и машинного оборудования', 'ремесленники и представители других отраслей промышленности', 'техники и младшие специалисты']),
        ('Профессия - низкая квалификация', 'Профессия', ['низкоквалифицированные работники', 'ведение домашнего хозяйства']),
        ('Вы работаете?', 'Вы работаете?', [1]),
        ('Выход на пенсию', 'Выход на пенсию', [1]),
        ('Прекращение работы по болезни', 'Прекращение работы по болезни', [1]),
        ('Сахарный диабет', 'Сахарный диабет', [1]),
        ('Гепатит', 'Гепатит', [1]),
        ('Онкология', 'Онкология', [1]),
        ('Хроническое заболевание легких', 'Хроническое заболевание легких', [1]),
        ('Бронхиальная астма', 'Бронжиальная астма', [1]),
        ('Туберкулез легких', 'Туберкулез легких ', [1]),
        ('ВИЧ/СПИД', 'ВИЧ/СПИД', [1]),
        ('Регулярный прием лекарственных средств', 'Регулярный прим лекарственных средств', [1]),
        ('Травмы за год', 'Травмы за год', [1]),
        ('Переломы', 'Переломы', [1]),
        ('Статус Курения - Бросил(а)', 'Статус Курения', ['Бросил(а)']),
        ('Статус Курения - Курит', 'Статус Курения', ['Курит']),
        ('Статус Курения - Никогда не курил(а)', 'Статус Курения', ['Никогда не курил(а)']),
        ('Пассивное курение', 'Пассивное курение', [1]),
        ('Алкоголь - никогда не употреблял', 'Алкоголь', ['никогда не употреблял']),
        ('Алкоголь - ранее употреблял', 'Алкоголь', ['ранее употреблял']),
        ('Алкоголь - употребляю в настоящее время', 'Алкоголь', ['употребляю в настоящее время']),
        ('Сон после обеда', 'Сон после обеда', [1]),
        ('Спорт клубы', 'Спорт, клубы', [1]),
        ('Религия клубы', 'Религия, клубы', [1]),
    ]

    for name, column, values in base_features:
        features[name] = data[column].isin(values)

    features = features.copy()  # de-fragmentation

    def second_hand_smoke_count(value):
        if value == '1-2 раза в неделю':
            return 1.5
        if value == '2-3 раза в день':
            return 17.5
        if value == '3-6 раз в неделю':
            return 4.5
        if value == '4 и более раз в день':
            return 28.0
        if value == 'не менее 1 раза в день':
            return 7.0
        return 0.0

    def round_time(hour, min):
        if min <= 15:
            return hour, 0
        if 15 < min < 45:
            return hour, 30
        return hour + 1, 0

    def sleep_time(value):
        hour, min, sec = map(int, value.split(':'))
        hour, min = round_time(hour, min)

        if hour >= 23:
            return (hour - 23) + min / 60
        if hour < 12:
            return hour + 1 + min / 60
        return (hour + min / 60) - 23

    def wakeup_time(value):
        hour, min, sec = map(int, value.split(':'))
        hour, min = round_time(hour, min)

        if hour >= 7:
            return (hour - 7) + min / 60
        return (hour + min / 60) - 7

    features['Одинокий мужчина'] = (data['Пол'] == 'М') & (features['Семья - живет один'] == True)
    features['Одинокая женщина'] = (data['Пол'] == 'Ж') & (features['Семья - живет один'] == True)
    features['Без работы и не на пенсии'] = (data['Вы работаете?'] == 0) & (data['Выход на пенсию'] == 0)
    features['Возраст курения'] = data['Возраст курения']
    features['Сигарет в день'] = data['Сигарет в день'].fillna(0).astype(int)
    features['Сигарет в день (актив)'] = features['Сигарет в день']
    features.loc[features['Статус Курения - Бросил(а)'], 'Сигарет в день (актив)'] = 0
    features['Частота пасс кур'] = data['Частота пасс кур'].apply(second_hand_smoke_count)
    features['Возраст алког'] = data['Возраст алког']
    features['Образование - Уровень'] = data['Образование'].str[0].astype(int)
    features['Болезнь легких'] = features['Хроническое заболевание легких'] | features['Бронхиальная астма'] | features['Туберкулез легких']
    features['Инфекционная болезнь'] = features['Гепатит'] | features['ВИЧ/СПИД']
    features['Хроническая болезнь'] = features['Болезнь легких'] | features['Инфекционная болезнь'] | features['Сахарный диабет'] | features['Онкология']
    features['Регулярный прием лекарственных средств без болезней из опроса'] = (features['Хроническая болезнь'] == False) & features['Регулярный прием лекарственных средств']
    features['Больной'] = features['Хроническая болезнь'] | features['Прекращение работы по болезни'] | features['Регулярный прием лекарственных средств']
    features['Травмы / переломы'] = features['Травмы за год'] | features['Переломы']
    features['Идеальное здоровье'] = (features['Больной'] == False) & (features['Травмы / переломы'] == False)
    features['Без вредных привычек'] = features['Статус Курения - Никогда не курил(а)'] & features['Алкоголь - никогда не употреблял']
    features['Бросил вредную привычку'] = features['Статус Курения - Бросил(а)'] | features['Алкоголь - ранее употреблял']
    features['Макс. возраст вредной привычки'] = features[['Возраст курения', 'Возраст алког']].max(axis=1)
    features['Само совершенство'] = features['Идеальное здоровье'] & features['Без вредных привычек'] & (features['Пассивное курение'] == False)
    features['Активное или пассивное курение'] = features['Пассивное курение'] | features['Статус Курения - Курит']
    features['Время засыпания'] = data['Время засыпания'].apply(sleep_time)
    features['Время пробуждения'] = data['Время пробуждения'].apply(wakeup_time)
    features['Продолжительность сна'] = 8 + features['Время пробуждения'] - features['Время засыпания']

    return features.copy()


def fill_na(data: pd.DataFrame) -> pd.DataFrame:
    data = data.copy()
    columns = [
        'Возраст курения',
        'Возраст алког',
        'Макс. возраст вредной привычки',
    ]

    for column in columns:
        data[column] = data[column].fillna(0.0)

    return data


def normalize_features(data: pd.DataFrame) -> pd.DataFrame:
    data = data.copy()

    # Feature                             min    max        mean
    # Возраст курения                     0.0   58.0    8.758115
    # Сигарет в день                        0     60    6.090052
    # Сигарет в день (актив)                0     60    3.372775
    # Частота пасс кур                    0.0   28.0    2.402618
    # Возраст алког                       0.0   63.0   16.534031
    # Образование - Уровень                 2      5    4.123560
    # Макс. возраст вредной привычки      0.0   63.0   18.287958
    # Время засыпания                    -3.0    4.0    0.221990
    # Время пробуждения                  -4.0    5.0   -0.068586
    # Продолжительность сна               3.0   13.0    7.709424

    age_columns = [
        'Возраст курения',
        'Возраст алког',
        'Макс. возраст вредной привычки',
    ]

    for column in age_columns:
        data[column] = np.sqrt(data[column])

    freq_columns = [
        'Сигарет в день',
        'Сигарет в день (актив)',
        'Частота пасс кур',
    ]

    #for column in freq_columns:
    #    data[column] = np.sqrt(data[column])

    data['Продолжительность сна'] -= 8
    data['Образование - Уровень'] -= 4
    return data


def xgboost_train_model(params, data, n_estimators, feature_names, target_name,
                        valid_sets=None, evals_result=None, only_recall_metric=False,
                        pred_treshold=0.5, verbose_eval=False):
    dtrain = xgb.DMatrix(data[feature_names], label=data[target_name].astype('int32'))

    def create_valid_dataset(data):
        return xgb.DMatrix(data[feature_names], label=data[target_name].astype('int32'))

    if valid_sets is not None:
        valid_sets = [(create_valid_dataset(data), 'valid_' + str(i)) for i, data in enumerate(valid_sets)]

    def feval(preds, eval_data):
        y_true = eval_data.get_label()
        y_pred = preds >= pred_treshold
        if only_recall_metric:
            return [
                ('recall_macro', recall_score(y_true, y_pred, average='macro'))
            ]
        return [
            ('recall_macro', recall_score(y_true, y_pred, average='macro')),
            ('recall_binary', recall_score(y_true, y_pred, average='binary')),
            ('accuracy', accuracy_score(y_true, y_pred)),
            ('true_count', y_true.sum()),
            ('pred_count', y_pred.sum()),
            ('accuracy_count', ((y_true == y_pred) & (y_true == True)).sum()),
            ]

    return xgb.train(params, dtrain, n_estimators, evals=valid_sets,
                     custom_metric=feval, evals_result=evals_result,
                     verbose_eval=verbose_eval)


def xgboost_predict_proba(data, models, best_iterations):
    data = xgb.DMatrix(data)
    return [model.predict(data, iteration_range=(0, best_iter + 1))
            for model, best_iter in zip(models, best_iterations)]


pred_treshold_ = 0.5

def tabnet_train_model(params, data, epoch_count, feature_names, target_name,
                       valid_sets=None, evals_result=None, only_recall_metric=False,
                       pred_treshold=0.5, **kwargs):
    
    global pred_treshold_
    pred_treshold_ = pred_treshold

    import torch
    torch.manual_seed(1)
    torch.set_num_threads(1)

    class RecallMacro(Metric):
    
        def __init__(self):
            self._name = "recall_macro"
            self._maximize = True
        
        def __call__(self, y_true, y_score):
            return recall_score(y_true, y_score[:,1] >= pred_treshold_, average='macro')

    train_X = data[feature_names].to_numpy(dtype='float32')
    train_y = data[target_name].to_numpy()

    def create_valid_dataset(df):
        return df[feature_names].to_numpy(dtype='float32'), df[target_name].to_numpy()

    if valid_sets is not None:
        valid_sets = [create_valid_dataset(df) for df in valid_sets]

    model = TabNetClassifier(**params)
    model.fit(
        train_X, train_y,
        max_epochs=epoch_count,
        batch_size=1000,
        patience=epoch_count,
        eval_set=valid_sets,
        eval_name=['valid'],
        eval_metric=['auc', 'accuracy', RecallMacro],
    )

    for k, v in model.history.history.items():
        evals_result[k] = v

    return model


def tabnet_predict_proba(data, models, best_iterations):
    data = data.to_numpy('float32')
    return [model.predict_proba(data)[:,1] for model in models]


def lightgbm_train_model(params, data, n_estimators, feature_names, target_name,
                         valid_sets=None, evals_result=None, only_recall_metric=False,
                         pred_treshold=0.5, verbose_eval=False):
    dtrain = lgb.Dataset(data[feature_names], label=data[target_name].astype('int32'))

    def create_valid_dataset(data):
        return lgb.Dataset(data[feature_names], label=data[target_name].astype('int32'))

    if valid_sets is not None:
        valid_sets = [create_valid_dataset(data) for data in valid_sets]

    def feval(preds, eval_data):
        y_true = eval_data.get_label()
        y_pred = preds >= pred_treshold
        if only_recall_metric:
            return [
                ('recall_macro', recall_score(y_true, y_pred, average='macro'), True)
            ]
        return [
            ('recall_macro', recall_score(y_true, y_pred, average='macro'), True),
            ('recall_binary', recall_score(y_true, y_pred, average='binary'), True),
            ('accuracy', accuracy_score(y_true, y_pred), True),
            ('true_count', y_true.sum(), True),
            ('pred_count', y_pred.sum(), True),
            ('accuracy_count', ((y_true == y_pred) & (y_true == True)).sum(), True),
            ]

    return lgb.train(params, dtrain, n_estimators, valid_sets=valid_sets,
                     feval=feval, evals_result=evals_result,
                     verbose_eval=verbose_eval)


def lightgbm_predict_proba(data, models, best_iterations):
    return [model.predict(data, num_iteration=(best_iter + 1))
            for model, best_iter in zip(models, best_iterations)]


def fit_predict_one_target(options: ProgramOptions, train_features: pd.DataFrame, test_features: pd.DataFrame,
                           target_name: str, feature_names: List[str], pred_treshold: float, params: dict, iter_count: int,
                           train_func, predict_func) -> List[np.array]:
    logger.info(f'Target: "{target_name}"')
    logger.debug(f'Features: {len(feature_names)}')
    logger.debug(f'Treshold: {pred_treshold}')
    logger.debug(f'Parameters: {params}')

    results = []
    models = []
    best_iterations = []
    metrics = []

    for seed in range(options.start_seed, options.start_seed + options.seed_count):
        k_fold = StratifiedKFold(options.fold_count, shuffle=True, random_state=seed)

        for train_index, val_index in k_fold.split(train_features, train_features[target_name]):
            train_df = train_features.iloc[train_index]
            val_df = train_features.iloc[val_index]

            evals_result = {}
            model = train_func(params, train_df, iter_count, 
                               feature_names=feature_names,
                               target_name=target_name,
                               valid_sets=[val_df], evals_result=evals_result,
                               pred_treshold=pred_treshold,
                               only_recall_metric=True, verbose_eval=False)
        
            if options.model_name in ('xgboost', 'lightgbm'):
                metric_results = evals_result['valid_0']['recall_macro']
                best_result = max(metric_results)
                best_iter = int(np.argmax(metric_results))
            elif options.model_name == 'tabnet':
                best_result = model.best_cost
                best_iter = model.best_epoch

            logger.info(f'Score: {best_result} (iteration={best_iter})')

            results.append(evals_result)
            models.append(model)
            best_iterations.append(best_iter)
            metrics.append(best_result)

        logger.info(f'Fold score: {np.mean(metrics[-options.fold_count:])}')

    logger.info(f'Total score: {np.mean(metrics)} (min={min(metrics)}, max={max(metrics)})')

    return predict_func(test_features[feature_names], models, best_iterations)


def fit_predict(options: ProgramOptions):
    train_data = pd.read_csv(options.input_data_dir / 'train.csv', encoding='utf-8')
    test_data = pd.read_csv(options.input_data_dir / 'test.csv', encoding='utf-8')

    train_features = create_features(train_data, True)
    test_features = create_features(test_data, False)

    output_data = test_features[['ID']].copy()

    for target_name in TARGETS:
        if options.model_name == 'xgboost':
            predicts = fit_predict_one_target(
                options, train_features, test_features, target_name,
                XGBOOST_FEATURE_NAMES[target_name],
                XGBOOST_PRED_TRESHOLDS[target_name],
                XGBOOST_PARAMS[target_name],
                XGBOOST_TREE_COUNT,
                xgboost_train_model,
                xgboost_predict_proba)
        elif options.model_name == 'tabnet':
            train_features_norm = normalize_features(fill_na(train_features))
            test_features_norm = normalize_features(fill_na(test_features))
            predicts = fit_predict_one_target(
                options, train_features_norm, test_features_norm, target_name,
                TABNET_FEATURE_NAMES[target_name],
                TABNET_PRED_TRESHOLDS[target_name],
                TABNET_PARAMS[target_name],
                TABNET_EPOCH_COUNT,
                tabnet_train_model,
                tabnet_predict_proba)
        elif options.model_name == 'lightgbm':
            predicts = fit_predict_one_target(
                options, train_features, test_features, target_name,
                LIGHTGBM_FEATURE_NAMES[target_name],
                LIGHTGBM_PRED_TRESHOLDS[target_name],
                LIGHTGBM_PARAMS[target_name],
                LIGHTGBM_TREE_COUNT,
                lightgbm_train_model,
                lightgbm_predict_proba)

        for i in range(options.fold_count * options.seed_count):
            output_data[f'{target_name} - {i}'] = predicts[i]

    logger.info('Save predicts...')
    output_data.to_csv(options.output_path, index=False, encoding='utf-8')
   

def configure_logging(output_path: Optional[Path]):
    formatter = logging.Formatter('%(asctime)s [%(levelname)5s] %(message)s')

    stream_handler = logging.StreamHandler()
    stream_handler.setFormatter(formatter)
    stream_handler.setLevel(logging.DEBUG)
    logger.addHandler(stream_handler)

    if output_path is not None:
        output_path.parent.mkdir(parents=True, exist_ok=True)
        file_handler = logging.FileHandler(output_path, 'wt', encoding='utf-8')
        file_handler.setFormatter(formatter)
        file_handler.setLevel(logging.DEBUG)
        logger.addHandler(file_handler)

    logger.setLevel(1) # min level


def parse_command_line_options() -> ProgramOptions:
    parser = argparse.ArgumentParser(
        description='Train model and predict disease for the Yaroslavl regional contest (https://lk.hacks-ai.ru/758240/champ).',
        formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument('-i,--input-data-dir', dest='input_data_dir', type=Path, required=True,
                        help='path to the input data directory (must contains "train.csv" and "test.csv")')

    parser.add_argument('-o,--output-path', dest='output_path', type=Path, required=True,
                        help='path to the output csv-file')

    parser.add_argument('-m,--model-name', dest='model_name', required=True,
                        choices=['xgboost', 'lightgbm', 'tabnet'],
                        help='model name, possible values: "xgboost", "lightgbm" or "tabnet"')

    parser.add_argument('--start-seed', dest='start_seed', type=int,
                        help='start seed (default: %(default)s)')

    parser.add_argument('--seed-count', dest='seed_count', type=int,
                        help='seed count (default: %(default)s)')

    parser.add_argument('--fold-count', dest='fold_count', type=int,
                        help='fold count (default: %(default)s)')

    parser.add_argument('--log-path', dest='log_path', type=Path,
                        help='path to the log file')

    parser.set_defaults(start_seed=1, seed_count=5, fold_count=5)
    
    args = parser.parse_args()

    if not args.input_data_dir.exists():
        parser.error(f'argument --input-data-dir: path "{args.input_data_dir}" not found')

    return ProgramOptions(**vars(args))


def main():
    options = parse_command_line_options()

    configure_logging(options.log_path)

    start_time = time.perf_counter()
    fit_predict(options)
    logger.info(f'Total time: {time.perf_counter() - start_time} sec')


if __name__ == '__main__':
    main()
